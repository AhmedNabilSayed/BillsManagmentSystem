@using BillsEntity;
@using BillsManagmentSystem.ViewModels;
@model SalesBillHeaderViewModel
@{
	var billDetails = ViewBag.SalesBillDetails as List<SalesBillDetailsViewModel>;
	var Customer = new SelectList(ViewBag.Customer, "CustomerId", "CustomerName");
	var Stores = new SelectList(ViewBag.Stores, "Id", "Name");
	var Items = new SelectList(ViewBag.Items, "ItmCod", "ItmNam");

	ViewData["Title"] = "Update";
}

<div class="container">
	<div class="row">
		<div class="col-md-12">
			<h1>Header Invoice</h1>
		</div>
	</div>

	<div class="row">
		<div class="col-md-6">
			<input id="bilimg" value="@Model.BILIMG" hidden/>
			<table class="table table-bordered">
				<tbody>
					<tr>
						<th>Invoic No</th>
						<td>
							<input id="invoicNo" name="invoicNo" class="invoicNo form-control" value="@Model.BILCOD" required disabled />
							<span id="invoicNoError" class="text-danger"></span>
						</td>
					</tr>

					<tr>
						<th>Customer Name</th>
						<td>
							<select id="customerName" name="customerName" class="customerName form-control" asp-for="@Model.CustomerId" asp-items="Customer" required>
								<option disabled>-- Select Customer --</option>
							</select>
							<span id="customerNameError" class="text-danger"></span>
						</td>
					</tr>

					<tr>
						<th>Store Name</th>
						<td>
							<select id="storeName" name="storeName" class="storeName form-control" asp-for="@Model.StoreId" asp-items="Stores" required>
								<option selected disabled>-- Select Store --</option>
							</select>
							<span id="storeNameError" class="text-danger"></span>
						</td>
					</tr>

					<tr>
						<th>Date</th>
						<td>
							<input id="dateAdded" name="dateAdded" type="datetime-local" value="@Model.BILDAT" min="ViewBag.CurrentDate" class="form-control" required />
							<span id="dateError" class="text-danger"></span>
						</td>
					</tr>

					<tr>
						<th>Attach File</th>
						<td>
							<input id="attach" name="attach" type="file" class="attach form-control" required />
							<span id="attachError" class="text-danger"> </span>
						</td>
					</tr>
				</tbody>
			</table>
		</div>

		<div class="row">
			<div class="col-md-12">
				<h1>Details Invoice</h1>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				<table id="tableHead" class="table table-bordered">
					<thead>
						<tr>
							<th>Item Name</th>
							<th>Quantity</th>
							<th>Price</th>
							<th>Total</th>
							<th>Action</th>
						</tr>
					</thead>
					<tbody>
						<tr id="trrows">
							<td class="w-25">
								<select id="item" class="item form-control"  required>
									<option selected disabled>Select Item</option>
								</select>
							</td>

							<td class="w-50">
								<input id="quantity" value="1" class="quantity form-control" required />
							</td>

							<td><input id="price" class="price form-control" required  /></td>
							<td><input id="total" value="0" class="total form-control" disabled /></td>
							<td><button type="submit" id="addToCart" name="addToCart" class="btn btn-primary">Add</button></td>
						</tr>
					</tbody>
				</table>
				<div>
					<span id="itemError" class="text-danger"></span>
				</div>
				@if (billDetails.Count() > 0)
				{
				<table id="tblrows" class="table table-bordered">
						@foreach (var item in billDetails)
						{
							<tr data-dtlcod="@item.DTLCOD" data-bilcod="@Model.BILCOD" data-isdeleted="false">
								<td class="w-25">
									<select id="item" class="item form-control" asp-for="@item.ITMCOD" asp-items="Items" data-quantity="@item.ITMQTY" disabled>
										<option selected disabled>Select Item</option>
									    </select>
								</td>
								<td class="w-50">
									<input id="quantity" value="@item.ITMQTY" class="quantity form-control" required />
								</td>
								<td><input id="price" value="@item.ITMPRC" class="price form-control" required /></td>
								<td><input id="total" value="@item.Total" class="total form-control" disabled /></td>
								<td><button type="submit" id="addToCart" name="addToCart" class="remove btn btn-danger">delete</button></td>
							</tr>
						}
				</table>
				}
			</div>

		</div>

		<div class="col-md-6">
			<button type="submit" id="update" name="update" class="btn-lg btn-success w-100 mb-3">Update</button>
		</div>

		<div>

			<label style="font-size:25px">
				Total :
			</label>
			<input id="totalBill" class="totalBill" name="totalBill" value="@Model.BILPRC" disabled />

			<form asp-controller="Sales" asp-action="Details">
				<input id="detail" class="detail" name="id" value="@Model.BILCOD" hidden />
				<button name="print" id="print" class="print">Print</button>
			</form>


		</div>
	</div>
</div>

@section Scripts{
	@*<script type="text/javascript">
		$(document).ready(function () {
			$(".item").change(function () {
				var select = $(this).closest("tr").find('.price');
				var ID = $(this).val();
				$.getJSON("Bills/GetPrice", { itemId: ID },
					function (data) {
						console.log(data);
						select.empty();
						select.val(data);
					}
				);
			});
		});
	</script>*@

	<script type="text/javascript">
		$(document).ready(function () {
			$(".item").change(function () {
				var ID = $(this).val();

				var select = $(this).closest("tr").find('.price');
				var total = $(this).closest("tr").find('.total');
				var quantity = $(this).closest("tr").find('.quantity').val();
				$.getJSON("../../Sales/GetPrice", { itemId: ID })
					.done(function (data) {
						console.log(data);
						select.empty();
						select.val(data);
						total.val(data * quantity);
					})
					.fail(function (jqXHR, textStatus, errorThrown) {
						console.log("AJAX request failed: " + textStatus + ", " + errorThrown);
					});
			});

			$("#tableHead .quantity").change(function () {
				var quantityD = $(this).val();
				var priceD = parseInt($(this).parents("tr").find('.price').val());
				var total = $(this).closest("tr").find('.total');

				if (priceD && quantityD) {
					total.val(priceD * quantityD);
				} else {
					total.val(0);
				}
			});



			//$("#table1").on("change", ".quantity", function () {
			//	var priceD = parseInt($(this).parents("tr").find('.price').val());
			//	var quantityD = $(this).val();
			//	var total = $(this).closest("tr").find('.total');



			//	if(priceD && quantityD){
			//		total.val(priceD * qun);
			//	}

			//}


			$("#tblrows").on("change", ".item", function () {
				var ID = $(this).val();
				var select = $(this).closest("tr").find('.price');
				var quantityD = parseInt($(this).parents("tr").find('.quantity').val());

				var totalPrice = parseFloat($("#totalBill").val());


				var oldPrice = select.val();
				var total = $(this).closest("tr").find('.total');

				$.getJSON("../../Sales/GetPrice", { itemId: ID }, function (data) {
					console.log(data);
					select.empty();
					select.val(data);

					totalPrice += parseFloat(quantityD * data - quantityD * oldPrice); // Corrected line
					$("#totalBill").val(totalPrice.toFixed(2));
					total.val(data * quantityD);
				});
			});


			$("#tblrows").on("change", ".quantity", function () {
				var newQuantity = $(this).val();
				var select = parseFloat($(this).closest("tr").find('.price').val()); // Retrieve the price value
				var total = $(this).closest("tr").find('.total');

				var oldTotal = parseFloat(total.val()); // Convert the value to a float

				var totalPrice = parseFloat($("#totalBill").val()); // Assuming 'totalPrice' is defined somewhere

				totalPrice += parseFloat((newQuantity * select) - oldTotal); // Calculate the change in total price

				$("#totalBill").val(totalPrice.toFixed(2)); // Update the total price

				total.val((select * newQuantity).toFixed(2)); // Update the total field
			});

			$("#tblrows").on("change", ".price", function () {
				var newPrice = $(this).val();
				var Quantity = parseFloat($(this).closest("tr").find('.quantity').val()); // Retrieve the price value
				var total = $(this).closest("tr").find('.total');

				var oldTotal = parseFloat(total.val()); // Convert the value to a float

				var totalPrice = parseFloat($("#totalBill").val()); // Assuming 'totalPrice' is defined somewhere

				totalPrice += (newPrice * Quantity) - oldTotal; // Calculate the change in total price

				$("#totalBill").val(totalPrice.toFixed(2)); // Update the total price

				total.val((newPrice * Quantity).toFixed(2)); // Update the total field
			});

			$("#tblrows").on("click", ".remove", function () {
				var total = parseFloat($(this).parents("tr").find('.total').val());
				var totalPrice = parseFloat($("#totalBill").val());

				totalPrice -= parseFloat(total);
				$("#totalBill").val(totalPrice.toFixed(2));
				$(this).parents("tr").attr('data-isdeleted', "true");
				$(this).parents("tr").attr("hidden", true);
			});
		});
	</script>




	<script type="text/javascript">
		$(document).ready(function () {
			$("#update").click(function () {
				var billDetails = [];
				jQuery("#tblrows tr").each(function () {
					var item = {
						"DTLCOD": $(this).data("dtlcod"),
						"ITMCOD": $(this).find('select.item>option:checked').val(),
						"ITMPRC": $(this).find('.price').val(),
						"ITMQTY": $(this).find('.quantity').val(),
						"BILCOD": $(this).data("bilcod"),
						"IsDeleted": $(this).data("isdeleted")
					};
					var isDeletedValue = $(this).data("isdeleted");
					console.log("IsDeleted value:", isDeletedValue);
					billDetails.push(item);
				});


				console.log("000000");

				var BILCOD = $('#invoicNo').val();
				var CustomerId = $('#customerName').val();
				var StoreId = $('#storeName').val();
				var BILDAT = $('#dateAdded').val();
				var BILIMG = $('#bilimg').val();
				var Image = $('#attach').prop('files')[0];


				var formData = new FormData();
				formData.append('BILCOD', BILCOD);
				formData.append('CustomerId', CustomerId);
				formData.append('StoreId', StoreId);
				formData.append('BILDAT', BILDAT);
				formData.append('BILIMG', BILIMG);
				formData.append('Image', Image);
				formData.append('billDetails', JSON.stringify(billDetails));

 
				var invoiceNoError = document.getElementById("invoicNoError");
				var customerNameError = document.getElementById("customerNameError");
				var storeNameError = document.getElementById("storeNameError");
				var dateError = document.getElementById("dateError");
				var itemError = document.getElementById("itemError");


				if (!BILCOD) {
					invoiceNoError.textContent = "Invoice Number Is Required";
				} else {
					invoiceNoError.textContent = "";
				}

				if (!CustomerId) {
					customerNameError.textContent = "Vendor Name Is Required";
				} else {
					customerNameError.textContent = "";
				}
				
				if (!StoreId) {
					storeNameError.textContent = "Store Name Is Required";
				} else {
					storeNameError.textContent = "";
				}

				if (!BILDAT) {
					dateError.textContent = "Date Is Required";
				} else {
					dateError.textContent = "";
				}

				if (billDetails.length == 0) {
					itemError.textContent = "items Is Required";
				} 

				if (!invoiceNoError.textContent && !customerNameError.textContent && !dateError.textContent  && !itemError.textContent && billDetails.length > 0) {
					$("#detail").val(BILCOD);

					$.ajax({
						url: '/Sales/Update',
						type: 'POST',
						dataType: 'json',
						data: formData,
						contentType: false,
						processData: false,
						success: function (data) {
							if (data) {
								$.getJSON("../../Sales/GetTotalPrice", { invoiceNo: BILCOD },
									function (data) {
										var select = $("#totalBill");
										console.log(data);
										select.empty();
										select.val(data);
									}
								);
								alert('! تم الحفظ بنجاح');
							} else {
								alert('! حدث خطأ أثناء الحفظ');
							}

						},
						error: function (data) {
							alert('! حدث خطأ أثناء الحفظ');
							console.log(data);


						}
					});
				}

			});
		});
	</script>



	<script type="text/javascript">

		$(document).ready(function () {

			$("#addToCart").click(function () {
				var item = $("#item").val();
				var itemError = document.getElementById("itemError");
				var price = parseFloat($("#price").val());
				var quantity = parseInt($("#quantity").val());
				var existingRow = $("#tblrows tr").filter(function () {
					return $(this).find('.item').val() == item;
				});

				var totalPrice = parseFloat(document.getElementById("totalBill").value);

				var selectedQuantity = parseInt($("#item").find('option:selected').data('quantity'));
				if (existingRow.length > 0){
					selectedQuantity += existingRow.find(".item").data("quantity");
				}

				console.log("Select Quantity :" + selectedQuantity);
				console.log("Select Quantity :" + existingRow);


				if(!itemError.textContent){
					if (item && price && quantity) {
						if (existingRow.length > 0) {
							var existingQuantity = parseInt(existingRow.find('.quantity').val());
							var newQuantity = existingQuantity + quantity;
							if (newQuantity <= selectedQuantity) {
								existingRow.find('.quantity').val(newQuantity);
								existingRow.find('.total').val(newQuantity * price);

								totalPrice += parseFloat(price * quantity);
								$("#totalbill").val(totalPrice.tofixed(2));
							} else {
								itemError.textContent = "the maximum quantity that can be added of that item is: " + selectedQuantity
							}

						}
						else {
							if (quantity <= selectedQuantity) {
								var trrow = $("#trrows").clone().removeAttr("id");
								$('.item', trrow).val(item).addClass('item1').attr({
									"disabled": "disabled",
									"data-quantity": "0"
								});

								$('.quantity', trrow).val(quantity).addClass('quantity1');

								$('.price', trrow).val(price).addClass('price1');

								$('.total', trrow).val(quantity * price).addClass('total1');


								$("#addtocart", trrow).addClass('remove').html('delete').removeClass("btn btn-primary").addClass("btn btn-danger");
								$("#tblrows").append(trrow);

								totalprice += parseFloat(price * quantity);
								$("#totalbill").val(totalprice.tofixed(2));
							} else {
								itemError.textContent = "the maximum quantity that can be added of that item is: " + selectedQuantity;
							}

						}



					} else {
						itemerror.textcontent = "item is invalid";
					}
				}

				


			});



		});



	</script>

	<script>
		$(document).ready(function () {
			var invoiceNoInput = $("#invoicNo");
			var customerNameInput = $("#customerName");
			var storeNameInput = $("#storeName");
			var dateInput = $("#dateAdded");


			invoiceNoInput.on("blur", validateInvoiceNo);
			customerNameInput.on("blur", validateCustomerName);
			storeNameInput.on("blur", validateStoreName);
			dateInput.on("blur", validateDate);

			function validateInvoiceNo() {
				var invoiceNo = invoiceNoInput.val();
				var invoicNoError = $("#invoicNoError");

				if (!invoiceNo) {
					invoicNoError.text("Invoice Number Is Required");
				} else {
					invoicNoError.text("");
				}
			}

			function validateCustomerName() {
				var customerName = customerNameInput.val();
				var customerNameError = $("#customerNameError");

				if (!customerName) {
					customerNameError.text("Customer Name Is Required");
				} else {
					customerNameError.text("");
				}
			}
			function validateStoreName() {
				var storeName = storeNameInput.val();
				var storeNameError = $("#storeNameError");

				if (!storeName) {
					storeNameError.text("store Name Is Required");
				} else {
					storeNameError.text("");
				}
			}

			function validateDate() {
				var date = dateInput.val();
				var dateError = $("#dateError");

				if (!date) {
					dateError.text("Date Is Required");
				} else {
					dateError.text("");
				}
			}
		});
	</script>


	<script>
		$(document).ready(function () {

			var initialStoreId = $('#storeName').val();
			// Function to fetch items based on selected store
			function fetchItemsByStore() {
				$.ajax({
					url: '@Url.Action("GetItemsByStore", "Sales")',
					type: 'GET',
					data: { storeId: initialStoreId },
					success: function (response) {
						console.log(response);
						console.log("Fetch wooooooooork");
						// Clear existing options
						$('#item').empty();
						// Add default disabled option
						$('#item').append($('<option>').text('-- Select Item --').attr('disabled', 'disabled').attr('selected', 'selected'));

						// Populate items dropdown with fetched items
						$.each(response, function (index, item) {
							$('#item').append($('<option>').text(item.Item.ItmNam).attr('value', item.Item.ItmCod).attr('data-quantity', item.ItemQuantity));
						});
					},
					error: function (xhr, status, error) {
						console.error(error);
					}
				});
			}

			// Trigger fetchItemsByStore function when the page loads
			
			

			setTimeout(function () {
				fetchItemsByStore();
			}, 100);

			// Function to update items based on selected store
			$('#storeName').change(function () {
				initialStoreId = $(this).val();
				fetchItemsByStore();
			});
		});
	</script>

	<script>
		$(document).ready(function () {
			$("#tblrows").on("change", ".quantity", function () {
				var quantityChanged = $(this).val();

				var row = $(this).closest("tr");
				var item = row.find(".item");

				var quantityInRow = item.data("quantity");
				var quantityInStock = $("#tableHead tr").find(".item").find("option[value= '"+item.val()+"']").data('quantity');
				if(quantityInStock == undefined){
					quantityInStock = 0;
				}
				console.log("quantity stoooock:" +quantityInStock);
				var allQuantity = quantityInRow + quantityInStock;

				var itemError = $("#itemError");

				if(quantityChanged > allQuantity){
					itemError.text("The maximum quantity that can be added of that item is: " + allQuantity);
				}else{
					itemError.text('');
				}
			});
		});

		$(document).ready(function () {
			$("#tableHead").on("change", ".quantity", function () {
				var quantityChanged = parseInt($(this).val());
				console.log("quantityChange : " + quantityChanged);
				var row = $(this).closest("tr");
				var item = row.find(".item");

				var quantityInStock = item.find('option:selected').data('quantity');
				console.log("quantityInStock : " + quantityInStock);
				var existingRow = $("#tblrows tr").filter(function () {
					return $(this).find('.item').val() == item.val();
				});

				var allQuantity = 0 ;
				if(existingRow){
					var quantityInRow = existingRow.find('.item').data("quantity");
					console.log("quantityInRow : " + quantityInRow);
					allQuantity = quantityInRow + quantityInStock ; 

					quantityChanged += parseInt(existingRow.find(".quantity").val());
				}else{
					allQuantity = quantityInStock ;
				}

				var itemError = $("#itemError");

				console.log("allQuantity : " + allQuantity);
				console.log("quantityChange : " + quantityChanged);

				if (quantityChanged > allQuantity) {
					itemError.text("The maximum quantity that can be added of that item is: " + allQuantity);
				} else {
					itemError.text('');
				}
			});
		});
		
	</script>


}